// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TykTechnologies/gateway-sdk/pkg/apim (interfaces: HotReloadAPI,KeysAPI)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	apim "github.com/TykTechnologies/gateway-sdk/pkg/apim"
	gomock "github.com/golang/mock/gomock"
)

// MockHotReloadAPI is a mock of HotReloadAPI interface.
type MockHotReloadAPI struct {
	ctrl     *gomock.Controller
	recorder *MockHotReloadAPIMockRecorder
}

// MockHotReloadAPIMockRecorder is the mock recorder for MockHotReloadAPI.
type MockHotReloadAPIMockRecorder struct {
	mock *MockHotReloadAPI
}

// NewMockHotReloadAPI creates a new mock instance.
func NewMockHotReloadAPI(ctrl *gomock.Controller) *MockHotReloadAPI {
	mock := &MockHotReloadAPI{ctrl: ctrl}
	mock.recorder = &MockHotReloadAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHotReloadAPI) EXPECT() *MockHotReloadAPIMockRecorder {
	return m.recorder
}

// HotReload mocks base method.
func (m *MockHotReloadAPI) HotReload(arg0 context.Context) apim.ApiHotReloadRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HotReload", arg0)
	ret0, _ := ret[0].(apim.ApiHotReloadRequest)
	return ret0
}

// HotReload indicates an expected call of HotReload.
func (mr *MockHotReloadAPIMockRecorder) HotReload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HotReload", reflect.TypeOf((*MockHotReloadAPI)(nil).HotReload), arg0)
}

// HotReloadExecute mocks base method.
func (m *MockHotReloadAPI) HotReloadExecute(arg0 apim.ApiHotReloadRequest) (*apim.ApiStatusMessage, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HotReloadExecute", arg0)
	ret0, _ := ret[0].(*apim.ApiStatusMessage)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HotReloadExecute indicates an expected call of HotReloadExecute.
func (mr *MockHotReloadAPIMockRecorder) HotReloadExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HotReloadExecute", reflect.TypeOf((*MockHotReloadAPI)(nil).HotReloadExecute), arg0)
}

// HotReloadGroup mocks base method.
func (m *MockHotReloadAPI) HotReloadGroup(arg0 context.Context) apim.ApiHotReloadGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HotReloadGroup", arg0)
	ret0, _ := ret[0].(apim.ApiHotReloadGroupRequest)
	return ret0
}

// HotReloadGroup indicates an expected call of HotReloadGroup.
func (mr *MockHotReloadAPIMockRecorder) HotReloadGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HotReloadGroup", reflect.TypeOf((*MockHotReloadAPI)(nil).HotReloadGroup), arg0)
}

// HotReloadGroupExecute mocks base method.
func (m *MockHotReloadAPI) HotReloadGroupExecute(arg0 apim.ApiHotReloadGroupRequest) (*apim.ApiStatusMessage, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HotReloadGroupExecute", arg0)
	ret0, _ := ret[0].(*apim.ApiStatusMessage)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HotReloadGroupExecute indicates an expected call of HotReloadGroupExecute.
func (mr *MockHotReloadAPIMockRecorder) HotReloadGroupExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HotReloadGroupExecute", reflect.TypeOf((*MockHotReloadAPI)(nil).HotReloadGroupExecute), arg0)
}

// MockKeysAPI is a mock of KeysAPI interface.
type MockKeysAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKeysAPIMockRecorder
}

// MockKeysAPIMockRecorder is the mock recorder for MockKeysAPI.
type MockKeysAPIMockRecorder struct {
	mock *MockKeysAPI
}

// NewMockKeysAPI creates a new mock instance.
func NewMockKeysAPI(ctrl *gomock.Controller) *MockKeysAPI {
	mock := &MockKeysAPI{ctrl: ctrl}
	mock.recorder = &MockKeysAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeysAPI) EXPECT() *MockKeysAPIMockRecorder {
	return m.recorder
}

// AddKey mocks base method.
func (m *MockKeysAPI) AddKey(arg0 context.Context) apim.ApiAddKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddKey", arg0)
	ret0, _ := ret[0].(apim.ApiAddKeyRequest)
	return ret0
}

// AddKey indicates an expected call of AddKey.
func (mr *MockKeysAPIMockRecorder) AddKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKey", reflect.TypeOf((*MockKeysAPI)(nil).AddKey), arg0)
}

// AddKeyExecute mocks base method.
func (m *MockKeysAPI) AddKeyExecute(arg0 apim.ApiAddKeyRequest) (*apim.ApiModifyKeySuccess, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddKeyExecute", arg0)
	ret0, _ := ret[0].(*apim.ApiModifyKeySuccess)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddKeyExecute indicates an expected call of AddKeyExecute.
func (mr *MockKeysAPIMockRecorder) AddKeyExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKeyExecute", reflect.TypeOf((*MockKeysAPI)(nil).AddKeyExecute), arg0)
}

// CreateCustomKey mocks base method.
func (m *MockKeysAPI) CreateCustomKey(arg0 context.Context, arg1 string) apim.ApiCreateCustomKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomKey", arg0, arg1)
	ret0, _ := ret[0].(apim.ApiCreateCustomKeyRequest)
	return ret0
}

// CreateCustomKey indicates an expected call of CreateCustomKey.
func (mr *MockKeysAPIMockRecorder) CreateCustomKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomKey", reflect.TypeOf((*MockKeysAPI)(nil).CreateCustomKey), arg0, arg1)
}

// CreateCustomKeyExecute mocks base method.
func (m *MockKeysAPI) CreateCustomKeyExecute(arg0 apim.ApiCreateCustomKeyRequest) (*apim.ApiModifyKeySuccess, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomKeyExecute", arg0)
	ret0, _ := ret[0].(*apim.ApiModifyKeySuccess)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCustomKeyExecute indicates an expected call of CreateCustomKeyExecute.
func (mr *MockKeysAPIMockRecorder) CreateCustomKeyExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomKeyExecute", reflect.TypeOf((*MockKeysAPI)(nil).CreateCustomKeyExecute), arg0)
}

// DeleteKey mocks base method.
func (m *MockKeysAPI) DeleteKey(arg0 context.Context, arg1 string) apim.ApiDeleteKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", arg0, arg1)
	ret0, _ := ret[0].(apim.ApiDeleteKeyRequest)
	return ret0
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockKeysAPIMockRecorder) DeleteKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockKeysAPI)(nil).DeleteKey), arg0, arg1)
}

// DeleteKeyExecute mocks base method.
func (m *MockKeysAPI) DeleteKeyExecute(arg0 apim.ApiDeleteKeyRequest) (*apim.ApiStatusMessage, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyExecute", arg0)
	ret0, _ := ret[0].(*apim.ApiStatusMessage)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteKeyExecute indicates an expected call of DeleteKeyExecute.
func (mr *MockKeysAPIMockRecorder) DeleteKeyExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyExecute", reflect.TypeOf((*MockKeysAPI)(nil).DeleteKeyExecute), arg0)
}

// GetKey mocks base method.
func (m *MockKeysAPI) GetKey(arg0 context.Context, arg1 string) apim.ApiGetKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0, arg1)
	ret0, _ := ret[0].(apim.ApiGetKeyRequest)
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockKeysAPIMockRecorder) GetKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockKeysAPI)(nil).GetKey), arg0, arg1)
}

// GetKeyExecute mocks base method.
func (m *MockKeysAPI) GetKeyExecute(arg0 apim.ApiGetKeyRequest) (*apim.SessionState, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyExecute", arg0)
	ret0, _ := ret[0].(*apim.SessionState)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKeyExecute indicates an expected call of GetKeyExecute.
func (mr *MockKeysAPIMockRecorder) GetKeyExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyExecute", reflect.TypeOf((*MockKeysAPI)(nil).GetKeyExecute), arg0)
}

// ListKeys mocks base method.
func (m *MockKeysAPI) ListKeys(arg0 context.Context) apim.ApiListKeysRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", arg0)
	ret0, _ := ret[0].(apim.ApiListKeysRequest)
	return ret0
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockKeysAPIMockRecorder) ListKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockKeysAPI)(nil).ListKeys), arg0)
}

// ListKeysExecute mocks base method.
func (m *MockKeysAPI) ListKeysExecute(arg0 apim.ApiListKeysRequest) (*apim.ApiAllKeys, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeysExecute", arg0)
	ret0, _ := ret[0].(*apim.ApiAllKeys)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListKeysExecute indicates an expected call of ListKeysExecute.
func (mr *MockKeysAPIMockRecorder) ListKeysExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeysExecute", reflect.TypeOf((*MockKeysAPI)(nil).ListKeysExecute), arg0)
}

// UpdateKey mocks base method.
func (m *MockKeysAPI) UpdateKey(arg0 context.Context, arg1 string) apim.ApiUpdateKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKey", arg0, arg1)
	ret0, _ := ret[0].(apim.ApiUpdateKeyRequest)
	return ret0
}

// UpdateKey indicates an expected call of UpdateKey.
func (mr *MockKeysAPIMockRecorder) UpdateKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKey", reflect.TypeOf((*MockKeysAPI)(nil).UpdateKey), arg0, arg1)
}

// UpdateKeyExecute mocks base method.
func (m *MockKeysAPI) UpdateKeyExecute(arg0 apim.ApiUpdateKeyRequest) (*apim.ApiModifyKeySuccess, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyExecute", arg0)
	ret0, _ := ret[0].(*apim.ApiModifyKeySuccess)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateKeyExecute indicates an expected call of UpdateKeyExecute.
func (mr *MockKeysAPIMockRecorder) UpdateKeyExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyExecute", reflect.TypeOf((*MockKeysAPI)(nil).UpdateKeyExecute), arg0)
}
