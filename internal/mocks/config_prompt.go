// Code generated by MockGen. DO NOT EDIT.
// Source: config_prompt.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfigPrompt is a mock of ConfigPrompt interface.
type MockConfigPrompt struct {
	ctrl     *gomock.Controller
	recorder *MockConfigPromptMockRecorder
}

// MockConfigPromptMockRecorder is the mock recorder for MockConfigPrompt.
type MockConfigPromptMockRecorder struct {
	mock *MockConfigPrompt
}

// NewMockConfigPrompt creates a new mock instance.
func NewMockConfigPrompt(ctrl *gomock.Controller) *MockConfigPrompt {
	mock := &MockConfigPrompt{ctrl: ctrl}
	mock.recorder = &MockConfigPromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigPrompt) EXPECT() *MockConfigPromptMockRecorder {
	return m.recorder
}

// PickConfig mocks base method.
func (m *MockConfigPrompt) PickConfig(current string, availableConfigFiles []string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PickConfig", current, availableConfigFiles)
	ret0, _ := ret[0].(string)
	return ret0
}

// PickConfig indicates an expected call of PickConfig.
func (mr *MockConfigPromptMockRecorder) PickConfig(current, availableConfigFiles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PickConfig", reflect.TypeOf((*MockConfigPrompt)(nil).PickConfig), current, availableConfigFiles)
}
