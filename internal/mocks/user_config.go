// Code generated by MockGen. DO NOT EDIT.
// Source: user_config.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserConfig is a mock of UserConfig interface.
type MockUserConfig struct {
	ctrl     *gomock.Controller
	recorder *MockUserConfigMockRecorder
}

// MockUserConfigMockRecorder is the mock recorder for MockUserConfig.
type MockUserConfigMockRecorder struct {
	mock *MockUserConfig
}

// NewMockUserConfig creates a new mock instance.
func NewMockUserConfig(ctrl *gomock.Controller) *MockUserConfig {
	mock := &MockUserConfig{ctrl: ctrl}
	mock.recorder = &MockUserConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserConfig) EXPECT() *MockUserConfigMockRecorder {
	return m.recorder
}

// GetCurrentUserEnv mocks base method.
func (m *MockUserConfig) GetCurrentUserEnv() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUserEnv")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentUserEnv indicates an expected call of GetCurrentUserEnv.
func (mr *MockUserConfigMockRecorder) GetCurrentUserEnv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUserEnv", reflect.TypeOf((*MockUserConfig)(nil).GetCurrentUserEnv))
}

// GetCurrentUserOrg mocks base method.
func (m *MockUserConfig) GetCurrentUserOrg() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUserOrg")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentUserOrg indicates an expected call of GetCurrentUserOrg.
func (mr *MockUserConfigMockRecorder) GetCurrentUserOrg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUserOrg", reflect.TypeOf((*MockUserConfig)(nil).GetCurrentUserOrg))
}

// GetCurrentUserRole mocks base method.
func (m *MockUserConfig) GetCurrentUserRole() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUserRole")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentUserRole indicates an expected call of GetCurrentUserRole.
func (mr *MockUserConfigMockRecorder) GetCurrentUserRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUserRole", reflect.TypeOf((*MockUserConfig)(nil).GetCurrentUserRole))
}

// GetCurrentUserTeam mocks base method.
func (m *MockUserConfig) GetCurrentUserTeam() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUserTeam")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentUserTeam indicates an expected call of GetCurrentUserTeam.
func (mr *MockUserConfigMockRecorder) GetCurrentUserTeam() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUserTeam", reflect.TypeOf((*MockUserConfig)(nil).GetCurrentUserTeam))
}
